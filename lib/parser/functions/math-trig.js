'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MATH_TRIG_FUNCTIONS = undefined;

var _formulajs = require('formulajs');

var formula = _interopRequireWildcard(_formulajs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var MATH_TRIG_FUNCTIONS = {
    ABS: formula.ABS,
    // ACOS: formula.ACOS,
    // ACOSH: formula.ACOSH,
    // ACOT: formula.ACOT,
    // ACOTH: formula.ACOTH,
    // AGGREGATE: formula.AGGREGATE,
    // PRODUCT: formula.PRODUCT,
    SUM: formula.SUM,
    ARABIC: formula.ARABIC,
    // ASIN: formula.ASIN,
    // ASINH: formula.ASINH,
    // ATAN: formula.ATAN,
    // ATAN2: formula.ATAN2,
    // ATANH: formula.ATANH,
    // BASE: formula.BASE,
    // CEILING: formula.CEILING,
    ROUND: formula.ROUND,
    // COMBIN: formula.COMBIN,
    // FACT: formula.FACT,
    // COMBINA: formula.COMBINA,
    // COS: formula.COS,
    // COSH: formula.COSH,
    // COT: formula.COT,
    // COTH: formula.COTH,
    // CSC: formula.CSC,
    // CSCH: formula.CSCH,
    // DECIMAL: formula.DECIMAL,
    // DEGREES: formula.DEGREES,
    // EVEN: formula.EVEN,
    // EXP: formula.EXP,
    // FACTDOUBLE: formula.FACTDOUBLE,
    // FLOOR: formula.FLOOR,
    // GCD: formula.GCD,
    // INT: formula.INT,
    // ISO: formula.ISO,
    // LCM: formula.LCM,
    // LN: formula.LN,
    // LOG: formula.LOG,
    // LOG10: formula.LOG10,
    // MDETERM: formula.MDETERM,
    // MINVERSE: formula.MINVERSE,
    // MMULT: formula.MMULT,
    MOD: formula.MOD,
    // MROUND: formula.MROUND,
    // MULTINOMIAL: formula.MULTINOMIAL,
    // MUNIT: formula.MUNIT,
    // ODD: formula.ODD,
    PI: formula.PI,
    // POWER: formula.POWER,
    // QUOTIENT: formula.QUOTIENT,
    RADIANS: formula.RADIANS,
    RAND: formula.RAND,
    RANDBETWEEN: formula.RANDBETWEEN,
    ROMAN: formula.ROMAN,
    ROUNDDOWN: formula.ROUNDDOWN,
    ROUNDUP: formula.ROUNDUP,
    // SEC: formula.SEC,
    // SECH: formula.SECH,
    // SERIESSUM: formula.SERIESSUM,
    SIGN: formula.SIGN,
    // SIN: formula.SIN,
    // SINH: formula.SINH,
    SQRT: formula.SQRT,
    // SQRTPI: formula.SQRTPI,
    // SUBTOTAL: formula.SUBTOTAL,
    ADD: formula.ADD,
    MINUS: formula.MINUS,
    DIVIDE: formula.DIVIDE,
    MULTIPLY: formula.MULTIPLY,
    GTE: formula.GTE,
    LT: formula.LT,
    LTE: formula.LTE,
    EQ: formula.EQ,
    NE: formula.NE,
    POW: formula.POW,
    // SUMIF: formula.SUMIF,
    // SUMIFS: formula.SUMIFS,
    SUMPRODUCT: formula.SUMPRODUCT,
    SUMSQ: formula.SUMSQ
    // SUMX2MY2: formula.SUMX2MY2,
    // SUMX2PY2: formula.SUMX2PY2,
    // SUMXMY2: formula.SUMXMY2,
    // TAN: formula.TAN,
    // TANH: formula.TANH,
    // TRUNC: formula.TRUNC,
};

exports.MATH_TRIG_FUNCTIONS = MATH_TRIG_FUNCTIONS;